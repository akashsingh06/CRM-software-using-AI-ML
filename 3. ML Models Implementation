backend/app/models/lead_scoring.py

import pandas as pd
import numpy as np
from sklearn.ensemble import RandomForestClassifier
from sklearn.model_selection import train_test_split
from sklearn.metrics import accuracy_score
from joblib import dump, load
import os

class LeadScoringModel:
    def __init__(self):
        self.model = None
        self.model_path = "app/models/lead_scoring_model.joblib"
        
    def train(self, data_path="data/leads.csv"):
        # Load and preprocess data
        df = pd.read_csv(data_path)
        X = df[['email_opens', 'page_views', 'time_on_site', 'lead_source']]
        X = pd.get_dummies(X)
        y = df['converted']
        
        # Train-test split
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )
        
        # Train model
        self.model = RandomForestClassifier(n_estimators=100)
        self.model.fit(X_train, y_train)
        
        # Evaluate
        y_pred = self.model.predict(X_test)
        accuracy = accuracy_score(y_test, y_pred)
        print(f"Model accuracy: {accuracy:.2f}")
        
        # Save model
        dump(self.model, self.model_path)
        
    def predict(self, lead_data):
        if not self.model:
            if os.path.exists(self.model_path):
                self.model = load(self.model_path)
            else:
                raise Exception("Model not trained yet")
                
        # Prepare input data
        input_df = pd.DataFrame([lead_data])
        input_df = pd.get_dummies(input_df)
        
        # Ensure all expected columns are present
        expected_columns = ['email_opens', 'page_views', 'time_on_site',
                           'lead_source_email', 'lead_source_social', 'lead_source_organic']
        for col in expected_columns:
            if col not in input_df.columns:
                input_df[col] = 0
                
        # Reorder columns
        input_df = input_df[expected_columns]
        
        return self.model.predict_proba(input_df)[0][1]
